# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.0.3

jobs:

  test_3_8:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: cimg/python:3.8
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
        environment:
           TZ: "/usr/share/zoneinfo/Europe/Berlin"

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements_dev.txt
        
      # run tests!
      # https://pytest.org
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PYTHONPATH=`pwd`;
            pytest -x --cov=./ --junitxml=test-reports/junit.xml tests -vv

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
          destination: test-reports
  test_3_9:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: cimg/python:3.9
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
        environment:
           TZ: "/usr/share/zoneinfo/Europe/Berlin"

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements_dev.txt
        
      # run tests!
      # https://pytest.org
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PYTHONPATH=`pwd`;
            pytest -x --cov=./ --junitxml=test-reports/junit.xml tests -vv

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
          destination: test-reports
  test_3_10:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: cimg/python:3.10
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
        environment:
           TZ: "/usr/share/zoneinfo/Europe/Berlin"

    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements_dev.txt
        
      # run tests!
      # https://pytest.org
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PYTHONPATH=`pwd`;
            pytest -x --cov=./ --junitxml=test-reports/junit.xml tests -vv

      - store_test_results:
          path: test-reports
          
      - store_artifacts:
          path: test-reports
          destination: test-reports

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - test_3_8:
          filters:
            tags:
              only: /.*/
      - test_3_9:
          filters:
            tags:
              only: /.*/
      - test_3_10:
          filters:
            tags:
              only: /.*/